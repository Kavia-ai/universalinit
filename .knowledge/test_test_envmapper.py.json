{"is_source_file": true, "format": "Python", "description": "This file contains test cases for the envmapper module, including tests for template parsing, environment variable mapping between common and framework-specific formats, and support for multiple frameworks. It verifies correct handling of edge cases, preservation of unmapped variables, and roundtrip consistency.", "external_files": ["pytest", "tempfile", "os", "yaml", "pathlib.Path", "universalinit_env.envmapper"], "external_methods": ["pytest.raises", "Path", "yaml.dump", "Path.exists", "Path.name"], "published": [], "classes": [{"name": "TestTemplatePath", "description": "Test suite for environment template path functions."}, {"name": "TestParseTemplateFile", "description": "Test suite for parsing environment template files."}, {"name": "TestPrefixMapping", "description": "Test suite for environment variable prefix application."}, {"name": "TestFrameworkMapping", "description": "Test suite for mapping common environment variables to framework-specific formats and vice versa."}, {"name": "TestSupportedFrameworks", "description": "Test suite to verify supported frameworks retrieval."}, {"name": "TestUnmappedVariablePreservation", "description": "Test that unmapped variables are preserved during mapping."}, {"name": "TestEdgeCases", "description": "Test suite covering special characters, unicode, long values, and other edge cases."}, {"name": "TestIntegration", "description": "End-to-end integration testing of parsing and mapping functions."}], "methods": [{"name": "test_get_template_path_existing(self)", "description": "Test retrieving an existing template path and its properties.", "scope": "TestTemplatePath", "scopeKind": "class"}, {"name": "test_get_template_path_nonexistent(self)", "description": "Test that requesting a nonexistent framework raises FileNotFoundError.", "scope": "TestTemplatePath", "scopeKind": "class"}, {"name": "test_parse_template_file_existing(self)", "description": "Test parsing a valid existing template file.", "scope": "TestParseTemplateFile", "scopeKind": "class"}, {"name": "test_parse_template_file_nonexistent(self)", "description": "Test parsing a nonexistent template file.", "scope": "TestParseTemplateFile", "scopeKind": "class"}, {"name": "test_parse_template_file_with_prefix(self)", "description": "Test parsing a template with a prefix specified in YAML.", "scope": "TestParseTemplateFile", "scopeKind": "class"}, {"name": "test_parse_template_file_without_prefix(self)", "description": "Test parsing a template with no prefix in YAML.", "scope": "TestParseTemplateFile", "scopeKind": "class"}, {"name": "test_parse_template_file_empty(self)", "description": "Test parsing an empty template file.", "scope": "TestParseTemplateFile", "scopeKind": "class"}, {"name": "test_parse_template_file_invalid_yaml(self)", "description": "Test behavior with invalid YAML content.", "scope": "TestParseTemplateFile", "scopeKind": "class"}, {"name": "test_parse_template_file_invalid_mapping(self)", "description": "Test behavior when 'mapping' key isn't a dictionary.", "scope": "TestParseTemplateFile", "scopeKind": "class"}, {"name": "test_apply_prefix_mapping(self)", "description": "Verify prefix application to environment variables.", "scope": "TestPrefixMapping", "scopeKind": "class"}, {"name": "test_apply_prefix_mapping_empty(self)", "description": "Test prefixing when environment is empty.", "scope": "TestPrefixMapping", "scopeKind": "class"}, {"name": "test_map_common_to_framework_react(self)", "description": "Test mapping from common env vars to React-specific env vars.", "scope": "TestFrameworkMapping", "scopeKind": "class"}, {"name": "test_map_framework_to_common_react(self)", "description": "Test mapping from React env vars to common env vars.", "scope": "TestFrameworkMapping", "scopeKind": "class"}, {"name": "test_mapping_roundtrip(self)", "description": "Ensure mapping can roundtrip without data loss.", "scope": "TestFrameworkMapping", "scopeKind": "class"}, {"name": "test_mapping_with_empty_env(self)", "description": "Verify behavior with empty environment variables.", "scope": "TestFrameworkMapping", "scopeKind": "class"}, {"name": "test_get_supported_frameworks(self)", "description": "Check retrieval of supported frameworks list.", "scope": "TestSupportedFrameworks", "scopeKind": "class"}, {"name": "test_preserve_unmapped_common_variables(self)", "description": "Test preservation of unmapped variables during common to framework mapping.", "scope": "TestUnmappedVariablePreservation", "scopeKind": "class"}, {"name": "test_preserve_unmapped_framework_variables(self)", "description": "Test preservation of unmapped variables during framework to common mapping.", "scope": "TestUnmappedVariablePreservation", "scopeKind": "class"}, {"name": "test_mapping_with_special_characters(self)", "description": "Test env variables with special characters are preserved.", "scope": "TestEdgeCases", "scopeKind": "class"}, {"name": "test_mapping_with_unicode(self)", "description": "Test unicode characters are preserved in mapping.", "scope": "TestEdgeCases", "scopeKind": "class"}, {"name": "test_mapping_with_very_long_values(self)", "description": "Test very long variable values are handled correctly.", "scope": "TestEdgeCases", "scopeKind": "class"}, {"name": "test_full_workflow(self)", "description": "End-to-end test from template parsing to env variable mapping.", "scope": "TestIntegration", "scopeKind": "class"}], "search-terms": ["envmapper", "template parsing", "environment variable mapping", "framework-specific env", "prefix application", "yaml templates", "edge cases", "roundtrip consistency", "supported frameworks", "unmapped variable preservation"], "state": 2, "file_id": 670, "knowledge_revision": 1359, "git_revision": "1aee8ed1eca8330cc765b711c43546e90b04ff39", "ctags": [{"_type": "tag", "name": "TestEdgeCases", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^class TestEdgeCases:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TestFrameworkMapping", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^class TestFrameworkMapping:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TestIntegration", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^class TestIntegration:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TestParseTemplateFile", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^class TestParseTemplateFile:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TestPrefixMapping", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^class TestPrefixMapping:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TestSupportedFrameworks", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^class TestSupportedFrameworks:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TestTemplatePath", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^class TestTemplatePath:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TestUnmappedVariablePreservation", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^class TestUnmappedVariablePreservation:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "test_apply_prefix_mapping", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_apply_prefix_mapping(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestPrefixMapping", "scopeKind": "class"}, {"_type": "tag", "name": "test_apply_prefix_mapping_empty", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_apply_prefix_mapping_empty(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestPrefixMapping", "scopeKind": "class"}, {"_type": "tag", "name": "test_full_workflow", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_full_workflow(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestIntegration", "scopeKind": "class"}, {"_type": "tag", "name": "test_get_supported_frameworks", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_get_supported_frameworks(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestSupportedFrameworks", "scopeKind": "class"}, {"_type": "tag", "name": "test_get_template_path_existing", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_get_template_path_existing(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestTemplatePath", "scopeKind": "class"}, {"_type": "tag", "name": "test_get_template_path_nonexistent", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_get_template_path_nonexistent(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestTemplatePath", "scopeKind": "class"}, {"_type": "tag", "name": "test_map_common_to_framework_react", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_map_common_to_framework_react(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestFrameworkMapping", "scopeKind": "class"}, {"_type": "tag", "name": "test_map_framework_to_common_react", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_map_framework_to_common_react(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestFrameworkMapping", "scopeKind": "class"}, {"_type": "tag", "name": "test_mapping_roundtrip", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_mapping_roundtrip(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestFrameworkMapping", "scopeKind": "class"}, {"_type": "tag", "name": "test_mapping_with_empty_env", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_mapping_with_empty_env(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestFrameworkMapping", "scopeKind": "class"}, {"_type": "tag", "name": "test_mapping_with_special_characters", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_mapping_with_special_characters(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestEdgeCases", "scopeKind": "class"}, {"_type": "tag", "name": "test_mapping_with_unicode", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_mapping_with_unicode(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestEdgeCases", "scopeKind": "class"}, {"_type": "tag", "name": "test_mapping_with_very_long_values", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_mapping_with_very_long_values(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestEdgeCases", "scopeKind": "class"}, {"_type": "tag", "name": "test_parse_template_file_empty", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_parse_template_file_empty(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestParseTemplateFile", "scopeKind": "class"}, {"_type": "tag", "name": "test_parse_template_file_existing", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_parse_template_file_existing(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestParseTemplateFile", "scopeKind": "class"}, {"_type": "tag", "name": "test_parse_template_file_invalid_mapping", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_parse_template_file_invalid_mapping(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestParseTemplateFile", "scopeKind": "class"}, {"_type": "tag", "name": "test_parse_template_file_invalid_yaml", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_parse_template_file_invalid_yaml(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestParseTemplateFile", "scopeKind": "class"}, {"_type": "tag", "name": "test_parse_template_file_nonexistent", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_parse_template_file_nonexistent(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestParseTemplateFile", "scopeKind": "class"}, {"_type": "tag", "name": "test_parse_template_file_with_prefix", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_parse_template_file_with_prefix(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestParseTemplateFile", "scopeKind": "class"}, {"_type": "tag", "name": "test_parse_template_file_without_prefix", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_parse_template_file_without_prefix(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestParseTemplateFile", "scopeKind": "class"}, {"_type": "tag", "name": "test_preserve_unmapped_common_variables", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_preserve_unmapped_common_variables(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestUnmappedVariablePreservation", "scopeKind": "class"}, {"_type": "tag", "name": "test_preserve_unmapped_framework_variables", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_envmapper.py", "pattern": "/^    def test_preserve_unmapped_framework_variables(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "TestUnmappedVariablePreservation", "scopeKind": "class"}], "hash": "3ba6c2e39c459e25b8ef160574176cdf", "format-version": 4, "code-base-name": "universalinit", "filename": "test/test_envmapper.py", "revision_history": [{"1359": "1aee8ed1eca8330cc765b711c43546e90b04ff39"}]}