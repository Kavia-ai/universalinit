{"is_source_file": true, "format": "Python", "description": "This file contains unit tests for the envmapper module, testing functions such as get_template_path, parse_template_file, mapping functions between common environment variables and framework-specific variables, and handling of edge cases.", "external_files": ["pytest", "tempfile", "os", "yaml", "pathlib.Path", "universalinit_env.envmapper"], "external_methods": ["pytest.raises", "yaml.dump", "yaml.load", "Path.exists", "Path.name"], "published": [], "classes": [{"name": "TestTemplatePath", "description": "Test class for verifying template path retrieval functions."}, {"name": "TestParseTemplateFile", "description": "Test class for verifying parsing of template files with various contents."}, {"name": "TestPrefixMapping", "description": "Test class for verifying prefix application to environment variables."}, {"name": "TestFrameworkMapping", "description": "Test class for verifying mapping functions between common env vars and framework-specific env vars."}, {"name": "TestSupportedFrameworks", "description": "Test class for verifying retrieval of supported frameworks."}, {"name": "TestUnmappedVariablePreservation", "description": "Test class for ensuring unmapped variables are preserved during mapping."}, {"name": "TestEdgeCases", "description": "Test class for verifying handling of special characters, unicode, and long values."}, {"name": "TestIntegration", "description": "Test class for verifying the full workflow from template parsing to environment variable mapping."}], "methods": [{"name": "test_get_template_path_existing", "description": "Tests retrieving an existing template path for 'react'."}, {"name": "test_get_template_path_nonexistent", "description": "Tests error handling when requesting a nonexistent framework template."}, {"name": "test_parse_template_file_existing", "description": "Tests parsing an existing template file and verifying its contents."}, {"name": "test_parse_template_file_nonexistent", "description": "Tests error handling when parsing a nonexistent template file."}, {"name": "test_parse_template_file_with_prefix", "description": "Tests parsing a template file with a prefix and verifying the parsed values."}, {"name": "test_parse_template_file_without_prefix", "description": "Tests parsing a template file without a prefix."}, {"name": "test_parse_template_file_empty", "description": "Tests parsing an empty template file."}, {"name": "test_parse_template_file_invalid_yaml", "description": "Tests error handling for invalid YAML content."}, {"name": "test_parse_template_file_invalid_mapping", "description": "Tests error handling for invalid 'mapping' type in YAML."}, {"name": "test_apply_prefix_mapping", "description": "Verifies prefix application to environment variables."}, {"name": "test_apply_prefix_mapping_empty", "description": "Verifies behavior with empty environment variables."}, {"name": "test_map_common_to_framework_react", "description": "Tests mapping from common env vars to React-specific env vars."}, {"name": "test_map_framework_to_common_react", "description": "Tests mapping from React-specific env vars back to common env vars."}, {"name": "test_mapping_roundtrip", "description": "Verifies that mapping to framework and back preserves data."}, {"name": "test_mapping_with_empty_env", "description": "Tests behavior with empty environment variables."}, {"name": "test_get_supported_frameworks", "description": "Verifies retrieval of supported frameworks list."}, {"name": "test_preserve_unmapped_common_variables", "description": "Ensures unmapped common variables are preserved when mapping to framework."}, {"name": "test_preserve_unmapped_framework_variables", "description": "Ensures unmapped framework variables are preserved when mapping to common."}, {"name": "test_mapping_with_special_characters", "description": "Verifies mapping handles special characters correctly."}, {"name": "test_mapping_with_unicode", "description": "Verifies mapping preserves unicode characters."}, {"name": "test_mapping_with_very_long_values", "description": "Verifies mapping preserves very long environment variable values."}, {"name": "test_full_workflow", "description": "Tests the complete process from template parsing to environment variable mapping and roundtrip."}], "calls": ["get_template_path", "parse_template_file", "map_common_to_framework", "map_framework_to_common"], "search-terms": ["envmapper", "test_envmapper", "template parsing", "framework env mapping", "prefix application", "supported frameworks", "unit tests", "pytest"], "state": 2, "file_id": 5, "knowledge_revision": 344, "git_revision": "50d7ef0c9ced2660ff15096e3e76f418c9a94782", "ctags": [], "filename": "test/test_envmapper.py", "hash": "3ba6c2e39c459e25b8ef160574176cdf", "format-version": 4, "code-base-name": "https://github.com/Kavia-ai/universalinit.git:main", "revision_history": [{"344": "50d7ef0c9ced2660ff15096e3e76f418c9a94782"}]}