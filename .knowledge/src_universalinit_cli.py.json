{"is_source_file": true, "format": "Python", "description": "This file is a command-line interface script for a project initialization tool called 'Universal Project Initializer'. It defines argument parsing, project configuration creation, and an entry point for executing project setup based on user input, including template handling and output formatting.", "external_files": ["universalinit.templateconfig", "universalinit.universalinit"], "external_methods": ["TemplateInitInfo.configure_environment", "TemplateInitInfo.build_cmd", "TemplateInitInfo.install_dependencies", "TemplateInitInfo.env_config", "TemplateInitInfo.openapi_generation", "TemplateInitInfo.run_tool", "TemplateInitInfo.test_tool", "ProjectConfig", "ProjectType.from_string", "ProjectInitializer", "ProjectInitializer.template_factory.create_template", "ProjectInitializer.initialize_project"], "published": ["main"], "classes": [{"name": "ProjectConfig", "description": "Configuration data class capturing project parameters such as name, version, description, author, type, output path, and additional parameters."}, {"name": "ProjectType", "description": "Enumeration or class handling different project type strings and conversions."}, {"name": "TemplateInitInfo", "description": "Data structure containing initial setup information for project templates, including commands and environment configurations."}, {"name": "ProjectInitializer", "description": "Main class orchestrating project creation and template handling, including methods 'create_template' and 'initialize_project'."}], "methods": [{"name": "Dict[str,Any] parse_parameters(params_str: str)", "description": "Parses a comma-separated string of key=value pairs into a dictionary with appropriate data types.", "scope": "", "scopeKind": ""}, {"name": "ProjectConfig create_project_config(args)", "description": "Constructs a ProjectConfig object from CLI arguments.", "scope": "", "scopeKind": ""}, {"name": "str make_path_absolute(path: str, base_path: Path)", "description": "Converts a relative path to an absolute path based on a base directory.", "scope": "", "scopeKind": ""}, {"name": "dict template_init_info_to_dict(init_info: TemplateInitInfo, project_path: Path)", "description": "Serializes TemplateInitInfo object into a dictionary with absolute paths for init_files.", "scope": "", "scopeKind": ""}, {"name": "output_json(success: bool, message: str, template_info: TemplateInitInfo = None, project_path: Path = None)", "description": "Formats and prints the response JSON for CLI output, indicating success or failure.", "scope": "", "scopeKind": ""}, {"name": "main()", "description": "Entry point of the CLI application, handling argument parsing, project setup, and output.", "scope": "", "scopeKind": ""}], "calls": ["argparse.ArgumentParser", "ProjectType.from_string", "Path", "TemplateInitInfo.configure_environment", "TemplateInitInfo.build_cmd", "TemplateInitInfo.install_dependencies", "TemplateInitInfo.env_config", "TemplateInitInfo.openapi_generation", "TemplateInitInfo.run_tool", "TemplateInitInfo.test_tool", "ProjectInitializer().template_factory.create_template", "create_project_config", "initializer.initialize_project", "output_json"], "search-terms": ["cli.py", "project initializer", "template configuration", "argument parsing", "project setup"], "state": 2, "file_id": 670, "knowledge_revision": 1348, "git_revision": "1aee8ed1eca8330cc765b711c43546e90b04ff39", "ctags": [{"_type": "tag", "name": "create_project_config", "path": "/home/kavia/workspace/code-generation/universalinit/src/universalinit/cli.py", "pattern": "/^def create_project_config(args) -> ProjectConfig:$/", "language": "Python", "typeref": "typename:ProjectConfig", "kind": "function", "signature": "(args)"}, {"_type": "tag", "name": "main", "path": "/home/kavia/workspace/code-generation/universalinit/src/universalinit/cli.py", "pattern": "/^def main():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "make_path_absolute", "path": "/home/kavia/workspace/code-generation/universalinit/src/universalinit/cli.py", "pattern": "/^def make_path_absolute(path: str, base_path: Path) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(path: str, base_path: Path)"}, {"_type": "tag", "name": "output_json", "path": "/home/kavia/workspace/code-generation/universalinit/src/universalinit/cli.py", "pattern": "/^def output_json(success: bool, message: str, template_info: TemplateInitInfo = None, project_pat/", "language": "Python", "kind": "function", "signature": "(success: bool, message: str, template_info: TemplateInitInfo = None, project_path: Path = None)"}, {"_type": "tag", "name": "parse_parameters", "path": "/home/kavia/workspace/code-generation/universalinit/src/universalinit/cli.py", "pattern": "/^def parse_parameters(params_str: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(params_str: str)"}, {"_type": "tag", "name": "template_init_info_to_dict", "path": "/home/kavia/workspace/code-generation/universalinit/src/universalinit/cli.py", "pattern": "/^def template_init_info_to_dict(init_info: TemplateInitInfo, project_path: Path) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "function", "signature": "(init_info: TemplateInitInfo, project_path: Path)"}], "hash": "757b2e18b385e1a9f5ec0b4e7fc257e0", "format-version": 4, "code-base-name": "universalinit", "filename": "src/universalinit/cli.py", "revision_history": [{"1348": "1aee8ed1eca8330cc765b711c43546e90b04ff39"}]}