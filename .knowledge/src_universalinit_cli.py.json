{"is_source_file": true, "format": "Python", "description": "This file serves as a command-line interface for initializing various project types using the 'universalinit' system. It parses command-line arguments to configure project parameters, constructs configuration objects, loads templates, and triggers project initialization while providing meaningful output and feedback.", "external_files": ["universalinit.templateconfig", "universalinit.universalinit"], "external_methods": ["TemplateInitInfo", "ProjectConfig", "ProjectType.from_string", "Path", "parse_parameters", "create_project_config", "make_path_absolute", "template_init_info_to_dict", "output_json", "main", "ProjectInitializer", "initializer.template_factory.create_template", "template.get_init_info", "initializer.initialize_project"], "published": ["main"], "classes": [{"name": "ProjectConfig", "description": "Configuration object representing the project settings, created from CLI arguments."}, {"name": "ProjectType", "description": "Enum or class handling the different project types with a method to parse from string."}, {"name": "TemplateInitInfo", "description": "Contains initialization information for project templates, including commands and environment configurations."}, {"name": "ProjectInitializer", "description": "Main class responsible for creating templates and orchestrating project initialization."}], "methods": [{"name": "Dict[str,Any] parse_parameters(params_str: str)", "description": "Parses a comma-separated key=value string into a dictionary with appropriate types.", "scope": "", "scopeKind": ""}, {"name": "ProjectConfig create_project_config(args)", "description": "Constructs a ProjectConfig object from CLI arguments, translating parameters accordingly.", "scope": "", "scopeKind": ""}, {"name": "str make_path_absolute(path: str, base_path: Path)", "description": "Converts a relative path to an absolute path based on the provided base Path.", "scope": "", "scopeKind": ""}, {"name": "dict template_init_info_to_dict(init_info: TemplateInitInfo, project_path: Path)", "description": "Transforms a TemplateInitInfo object into a dictionary suitable for JSON serialization, resolving paths to absolute.", "scope": "", "scopeKind": ""}, {"name": "output_json(success: bool, message: str, template_info: TemplateInitInfo = None, project_path: Path = None)", "description": "Formats and prints the output JSON containing success status, message, and optional template configuration.", "scope": "", "scopeKind": ""}, {"name": "main()", "description": "Entry point of the CLI script; parses arguments, creates configuration, loads templates, and initiates project setup.", "scope": "", "scopeKind": ""}], "calls": ["argparse.ArgumentParser", "argparse.RawDescriptionHelpFormatter", "ArgumentParser.add_argument", "ProjectType.from_string", "Path", "initializer.template_factory.create_template", "template.get_init_info", "initializer.initialize_project"], "search-terms": ["cli.py", "universalinit", "project initialization", "argument parsing", "template configuration", "project setup", "command-line interface", "template factory"], "state": 2, "file_id": 336, "knowledge_revision": 1042, "git_revision": "1aee8ed1eca8330cc765b711c43546e90b04ff39", "ctags": [{"_type": "tag", "name": "create_project_config", "path": "/home/kavia/workspace/code-generation/universalinit/src/universalinit/cli.py", "pattern": "/^def create_project_config(args) -> ProjectConfig:$/", "language": "Python", "typeref": "typename:ProjectConfig", "kind": "function", "signature": "(args)"}, {"_type": "tag", "name": "main", "path": "/home/kavia/workspace/code-generation/universalinit/src/universalinit/cli.py", "pattern": "/^def main():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "make_path_absolute", "path": "/home/kavia/workspace/code-generation/universalinit/src/universalinit/cli.py", "pattern": "/^def make_path_absolute(path: str, base_path: Path) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "function", "signature": "(path: str, base_path: Path)"}, {"_type": "tag", "name": "output_json", "path": "/home/kavia/workspace/code-generation/universalinit/src/universalinit/cli.py", "pattern": "/^def output_json(success: bool, message: str, template_info: TemplateInitInfo = None, project_pat/", "language": "Python", "kind": "function", "signature": "(success: bool, message: str, template_info: TemplateInitInfo = None, project_path: Path = None)"}, {"_type": "tag", "name": "parse_parameters", "path": "/home/kavia/workspace/code-generation/universalinit/src/universalinit/cli.py", "pattern": "/^def parse_parameters(params_str: str) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(params_str: str)"}, {"_type": "tag", "name": "template_init_info_to_dict", "path": "/home/kavia/workspace/code-generation/universalinit/src/universalinit/cli.py", "pattern": "/^def template_init_info_to_dict(init_info: TemplateInitInfo, project_path: Path) -> dict:$/", "language": "Python", "typeref": "typename:dict", "kind": "function", "signature": "(init_info: TemplateInitInfo, project_path: Path)"}], "hash": "757b2e18b385e1a9f5ec0b4e7fc257e0", "format-version": 4, "code-base-name": "universalinit", "filename": "src/universalinit/cli.py", "revision_history": [{"1042": "1aee8ed1eca8330cc765b711c43546e90b04ff39"}]}