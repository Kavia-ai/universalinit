{"is_source_file": true, "format": "Python", "description": "This source file contains Python test code that uses pytest for testing a TypeScript project initialization framework. It defines fixtures to set up temporary directory environments and mock templates, and includes multiple test functions to verify project configuration, template processing, initialization, post-processing, configuration loading, and variable replacement features.", "external_files": ["pytest", "pathlib.Path", "shutil", "tempfile", "yaml", "json", "universalinit.templateconfig.ProjectConfig", "universalinit.templateconfig.ProjectType", "universalinit.templateconfig.TemplateInitInfo", "universalinit.universalinit.ProjectInitializer", "universalinit.universalinit.TemplateProvider", "universalinit.universalinit.TypeScriptTemplate"], "external_methods": ["pytest.fixture", "Path.mkdir", "Path.write_text", "Path.read_text", "yaml.dump", "yaml.safe_load", "json.dump"], "published": ["test_typescript_template.py"], "classes": [{"name": "ProjectConfig", "description": "Configuration class for the project parameters such as name, version, description, author, type, output path, and parameters."}, {"name": "ProjectType", "description": "Enumeration for different project types, including TYPESCRIPT."}, {"name": "TemplateInitInfo", "description": "Data structure that holds initialization commands and environment configuration details for project templates."}], "methods": [{"name": "temp_dir()", "description": "Creates and cleans up a temporary directory for testing purposes.", "scope": "", "scopeKind": ""}, {"name": "template_dir(temp_dir)", "description": "Sets up a mock template directory with configuration and template files.", "scope": "", "scopeKind": ""}, {"name": "project_config(temp_dir)", "description": "Creates a sample project configuration for testing.", "scope": "", "scopeKind": ""}, {"name": "test_typescript_init_info(template_dir, project_config)", "description": "Verifies the retrieval of initial template information and configuration commands.", "scope": "", "scopeKind": ""}, {"name": "test_project_initialization(template_dir, project_config)", "description": "Tests the overall project initialization process, including directory structure and template content.", "scope": "", "scopeKind": ""}, {"name": "test_post_processing_execution(template_dir, project_config, temp_dir)", "description": "Checks that the post-processing script runs successfully and executes expected commands.", "scope": "", "scopeKind": ""}, {"name": "test_config_file_loading(temp_dir)", "description": "Tests loading of project configuration from a JSON file into the internal data structures.", "scope": "", "scopeKind": ""}, {"name": "test_template_variable_replacement(template_dir, project_config)", "description": "Ensures template variables within files are correctly replaced with project config values.", "scope": "", "scopeKind": ""}], "calls": ["yaml.dump", "yaml.safe_load", "Path.mkdir", "Path.write_text", "Path.read_text", "Path.exists", "shutil.rmtree", "Path.unlink", "json.dump"], "search-terms": ["pytest fixtures", "universalinit template configuration", "TypeScriptTemplate testing", "project initialization", "post processing scripts", "template variable replacement", "config.yml", "project_config", "test_typescript_template"], "state": 2, "file_id": 653, "knowledge_revision": 1332, "git_revision": "1aee8ed1eca8330cc765b711c43546e90b04ff39", "ctags": [{"_type": "tag", "name": "project_config", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_typescript_template.py", "pattern": "/^def project_config(temp_dir):$/", "language": "Python", "kind": "function", "signature": "(temp_dir)"}, {"_type": "tag", "name": "temp_dir", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_typescript_template.py", "pattern": "/^def temp_dir():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "template_dir", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_typescript_template.py", "pattern": "/^def template_dir(temp_dir):$/", "language": "Python", "kind": "function", "signature": "(temp_dir)"}, {"_type": "tag", "name": "test_config_file_loading", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_typescript_template.py", "pattern": "/^def test_config_file_loading(temp_dir):$/", "language": "Python", "kind": "function", "signature": "(temp_dir)"}, {"_type": "tag", "name": "test_post_processing_execution", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_typescript_template.py", "pattern": "/^def test_post_processing_execution(template_dir, project_config, temp_dir):$/", "language": "Python", "kind": "function", "signature": "(template_dir, project_config, temp_dir)"}, {"_type": "tag", "name": "test_project_initialization", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_typescript_template.py", "pattern": "/^def test_project_initialization(template_dir, project_config):$/", "language": "Python", "kind": "function", "signature": "(template_dir, project_config)"}, {"_type": "tag", "name": "test_template_variable_replacement", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_typescript_template.py", "pattern": "/^def test_template_variable_replacement(template_dir, project_config):$/", "language": "Python", "kind": "function", "signature": "(template_dir, project_config)"}, {"_type": "tag", "name": "test_typescript_init_info", "path": "/home/kavia/workspace/code-generation/universalinit/test/test_typescript_template.py", "pattern": "/^def test_typescript_init_info(template_dir, project_config):$/", "language": "Python", "kind": "function", "signature": "(template_dir, project_config)"}], "hash": "9c72bca8eaa6e54da5c69d0893a7a75d", "format-version": 4, "code-base-name": "universalinit", "filename": "test/test_typescript_template.py", "revision_history": [{"1332": "1aee8ed1eca8330cc765b711c43546e90b04ff39"}]}