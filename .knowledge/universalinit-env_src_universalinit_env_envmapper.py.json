{"is_source_file": true, "format": "Python", "description": "This file provides utility functions for managing environment variable mappings across different frameworks using templates. It includes functions for loading templates, parsing YAML configurations, applying prefixes, and converting environment variable dictionaries between common and framework-specific formats.", "external_files": ["yaml"], "external_methods": ["yaml.safe_load"], "published": ["get_template_path", "parse_template_file", "apply_prefix_mapping", "map_common_to_framework", "map_framework_to_common", "get_supported_frameworks"], "classes": [], "methods": [{"name": "Path get_template_path(framework: str)", "description": "Returns the path to the environment template file for a specified framework.", "scope": "", "scopeKind": ""}, {"name": "Tuple[Optional[str],Dict[str,str]] parse_template_file(template_path: Path)", "description": "Parses a YAML template file to extract an optional prefix and a mapping dictionary.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,str] apply_prefix_mapping(common_env: Dict[str, str], prefix: str)", "description": "Applies a prefix to all environment variables in the provided dictionary.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,str] map_common_to_framework(framework: str, common_env: Dict[str, str])", "description": "Converts a dictionary of common environment variables into framework-specific variables based on a template.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,str] map_framework_to_common(framework: str, framework_env: Dict[str, str])", "description": "Converts framework-specific environment variables back into the common format using a template.", "scope": "", "scopeKind": ""}, {"name": "list get_supported_frameworks()", "description": "Returns a list of supported frameworks based on available template directories.", "scope": "", "scopeKind": ""}], "calls": ["Path.parent", "Path.exists", "yaml.safe_load", "open", "file.read", "Path.iterdir"], "search-terms": ["env.template", "yaml configuration", "framework environment mapping", "prefix application", "template parsing"], "state": 2, "file_id": 678, "knowledge_revision": 1356, "git_revision": "1aee8ed1eca8330cc765b711c43546e90b04ff39", "ctags": [{"_type": "tag", "name": "apply_prefix_mapping", "path": "/home/kavia/workspace/code-generation/universalinit/universalinit-env/src/universalinit_env/envmapper.py", "pattern": "/^def apply_prefix_mapping(common_env: Dict[str, str], prefix: str) -> Dict[str, str]:$/", "language": "Python", "typeref": "typename:Dict[str,str]", "kind": "function", "signature": "(common_env: Dict[str, str], prefix: str)"}, {"_type": "tag", "name": "get_supported_frameworks", "path": "/home/kavia/workspace/code-generation/universalinit/universalinit-env/src/universalinit_env/envmapper.py", "pattern": "/^def get_supported_frameworks() -> list:$/", "language": "Python", "typeref": "typename:list", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "get_template_path", "path": "/home/kavia/workspace/code-generation/universalinit/universalinit-env/src/universalinit_env/envmapper.py", "pattern": "/^def get_template_path(framework: str) -> Path:$/", "language": "Python", "typeref": "typename:Path", "kind": "function", "signature": "(framework: str)"}, {"_type": "tag", "name": "map_common_to_framework", "path": "/home/kavia/workspace/code-generation/universalinit/universalinit-env/src/universalinit_env/envmapper.py", "pattern": "/^def map_common_to_framework(framework: str, common_env: Dict[str, str]) -> Dict[str, str]:$/", "language": "Python", "typeref": "typename:Dict[str,str]", "kind": "function", "signature": "(framework: str, common_env: Dict[str, str])"}, {"_type": "tag", "name": "map_framework_to_common", "path": "/home/kavia/workspace/code-generation/universalinit/universalinit-env/src/universalinit_env/envmapper.py", "pattern": "/^def map_framework_to_common(framework: str, framework_env: Dict[str, str]) -> Dict[str, str]:$/", "language": "Python", "typeref": "typename:Dict[str,str]", "kind": "function", "signature": "(framework: str, framework_env: Dict[str, str])"}, {"_type": "tag", "name": "parse_template_file", "path": "/home/kavia/workspace/code-generation/universalinit/universalinit-env/src/universalinit_env/envmapper.py", "pattern": "/^def parse_template_file(template_path: Path) -> Tuple[Optional[str], Dict[str, str]]:$/", "language": "Python", "typeref": "typename:Tuple[Optional[str],Dict[str,str]]", "kind": "function", "signature": "(template_path: Path)"}], "hash": "87751ba2390042a876683cb964b03d98", "format-version": 4, "code-base-name": "universalinit", "filename": "universalinit-env/src/universalinit_env/envmapper.py", "revision_history": [{"1356": "1aee8ed1eca8330cc765b711c43546e90b04ff39"}]}