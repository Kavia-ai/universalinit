{"is_source_file": true, "format": "Python", "description": "This file defines data structures and classes related to project configuration, including enumerations for project types, data classes for various configuration components, and a provider class for loading and processing template configuration data from a YAML file.", "external_files": ["yaml"], "external_methods": ["yaml.safe_load"], "published": ["ProjectType", "ProjectConfig", "ProcessingScript", "BuildCommand", "InstallDependenciesCommand", "EnvironmentConfig", "ConfigureEnvironment", "RunTool", "TestTool", "OpenapiGenerationTool", "TemplateInitInfo", "TemplateConfigProvider"], "classes": [{"name": "ProjectType", "description": "Enumeration of supported project types, including frontend frameworks, backend frameworks, and databases."}, {"name": "ProjectConfig", "description": "Holds configuration details for project initialization, including methods for retrieving default database users and replacing parameters in templates."}, {"name": "ProcessingScript", "description": "Represents a post-processing script configuration."}, {"name": "BuildCommand", "description": "Holds information about build commands and working directories."}, {"name": "InstallDependenciesCommand", "description": "Holds information about dependency installation commands and working directories."}, {"name": "EnvironmentConfig", "description": "Contains environment setup details such as versions of tools and SDKs."}, {"name": "ConfigureEnvironment", "description": "Represents commands to configure the environment."}, {"name": "RunTool", "description": "Configuration for running tools with commands and working directories."}, {"name": "TestTool", "description": "Configuration for testing tools with commands and working directories."}, {"name": "OpenapiGenerationTool", "description": "Configuration for OpenAPI generation commands and directories."}, {"name": "TemplateInitInfo", "description": "Aggregates all initialization information for a project template, including commands, environment, files, and scripts."}, {"name": "TemplateConfigProvider", "description": "Provides functionality to load and process template configuration data from a YAML file, applying parameter replacements."}], "methods": [{"name": "from_string", "description": "Converts a string to a ProjectType enum member."}, {"name": "get_replaceable_parameters", "description": "Returns a dictionary of parameters that can be replaced in templates."}, {"name": "replace_parameters", "description": "Replaces placeholders in content with actual parameter values."}, {"name": "get_init_info", "description": "Loads and processes the template configuration YAML file, returning a populated TemplateInitInfo object."}], "calls": ["yaml.safe_load"], "search-terms": ["templateconfig", "ProjectType", "TemplateConfigProvider", "replace_parameters", "yaml", "configuration", "template", "initialization"], "state": 2, "file_id": 34, "knowledge_revision": 404, "git_revision": "a59bcc7759ef3bf38bff29ce77c2dc64f3668a7f", "ctags": [], "filename": "src/universalinit/templateconfig.py", "hash": "f02d7731219efabc41c493382d79b254", "format-version": 4, "code-base-name": "https://github.com/Kavia-ai/universalinit.git:main", "revision_history": [{"404": "a59bcc7759ef3bf38bff29ce77c2dc64f3668a7f"}]}